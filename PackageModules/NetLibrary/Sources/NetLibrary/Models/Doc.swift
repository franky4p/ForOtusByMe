//
// Doc.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Doc: Codable, JSONEncodable, Hashable {

    public var key: String
    public var authorName: [String]?
    public var firstPublishYear: Int?
    public var numberOfPagesMedian: Int?
    public var title: String?
    public var seed: [String]?
    public var format: [String]?

    public init(key: String, authorName: [String]? = nil, firstPublishYear: Int? = nil, numberOfPagesMedian: Int? = nil, title: String? = nil, seed: [String]? = nil, format: [String]? = nil) {
        self.key = key
        self.authorName = authorName
        self.firstPublishYear = firstPublishYear
        self.numberOfPagesMedian = numberOfPagesMedian
        self.title = title
        self.seed = seed
        self.format = format
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case key
        case authorName = "author_name"
        case firstPublishYear = "first_publish_year"
        case numberOfPagesMedian = "number_of_pages_median"
        case title
        case seed
        case format
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(key, forKey: .key)
        try container.encodeIfPresent(authorName, forKey: .authorName)
        try container.encodeIfPresent(firstPublishYear, forKey: .firstPublishYear)
        try container.encodeIfPresent(numberOfPagesMedian, forKey: .numberOfPagesMedian)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(seed, forKey: .seed)
        try container.encodeIfPresent(format, forKey: .format)
    }
}

